<?php

/**
 * ProductPopularTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ProductPopularTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object ProductPopularTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('ProductPopular');
    }

    public static function update()
    {
        $skincare_category =
            CategoryTable::getInstance()->findOneBySlug('skincare');
        $basemake_category =
            CategoryTable::getInstance()->findOneBySlug('basemake');
        $pointmake_category =
            CategoryTable::getInstance()->findOneBySlug('pointmake');


        $skincare_popular_products = ProductAccessLogTable::getInstance()->
            getPopularProducts(10, $skincare_category);
        $basemake_popular_products = ProductAccessLogTable::getInstance()->
            getPopularProducts(10, $basemake_category);
        $pointmake_popular_products = ProductAccessLogTable::getInstance()->
            getPopularProducts(10, $pointmake_category);

        self::getInstance()->createQuery()->delete()->execute();

        $popular_products = array(
            'skincare' => $skincare_popular_products,
            'basemake' => $basemake_popular_products,
            'pointmake' => $pointmake_popular_products);
        $id = 1;
        foreach ($popular_products as $cat_name => $cat_popular_products) {
            $ranking = 1;
            foreach ($cat_popular_products as $cat_popular_product) {
                $obj = new ProductPopular();
                $obj->setId($id);
                $obj->setCategoryId($cat_popular_product->getCategoryId());
                $obj->setProductId($cat_popular_product->getId());
                $obj->setRanking($ranking);
                $obj->save();
                $id++;
                $ranking++;
            }
        }
    }

    public static function getProducts($limit = 10, Category $category = null)
    {
        $query = ProductTable::getInstance()->createQuery('p')->
            leftJoin('p.Line l')->
            leftJoin('p.ProductPopular pp')->
            where('pp.ranking is not null')->
            orderBy('pp.ranking');
        if ($category) {
            $query->addWhere('pp.category_id = ?', $category->getId());
        }
        $products = $query->execute();

        $limited_products = array();
        foreach ($products as $product) {
            if (count($limited_products) >= $limit) {
                break;
            }
            $limited_products[] = $product;
        }

        return $limited_products;
    }
}
