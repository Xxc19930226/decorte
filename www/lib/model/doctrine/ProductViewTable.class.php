<?php

/**
 * ProductViewTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ProductViewTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object ProductViewTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('ProductView');
    }

    /**
     * 会員が最近閲覧した商品を検索し返却する。
     *
     * @param Member $member 検索対象の会員
     * @return array 最近閲覧した商品の配列(閲覧日の逆順にソート済み)
     */
    public function findProductForMember(Member $member = null)
    {
        if (!$member) {
            return array();
        }

        $conn = Doctrine_Manager::connection();

        $conn->beginTransaction();

        try {
            $views = $this->createQuery('v')->
                forUpdate(true)->
                leftJoin('v.Product p')->
                where('v.member_id = ?', $member->getId())->
                orderBy('v.created_at DESC')->
                execute();

            $products = array();
            foreach ($views as $view) {
                $products[] = $view->getProduct();
                if (count($products) >
                    sfConfig::get('app_product_view_history_max')) {
                    break;
                }
            }

            $conn->commit();

            return $products;
        } catch (Exception $e) {
            $conn->rollback();
            throw $e;
        }
    }

    protected function compareForSort(ProductView $view1, ProductView $view2)
    {
        $created1 = $view1->getCreatedAt();
        $created2 = $view2->getCreatedAt();

        if ($created1 == $created2) {
            return 0;
        }
        return ($created1 < $created2) ? 1 : -1;
    }

    /**
     * 会員の商品閲覧履歴に商品を追加する。
     *
     * @param Member  $member    追加対象の会員
     * @param Product $product   追加する商品
     * @param array   $old_views 以前の閲覧履歴
     * @return array 商品追加後の新しい閲覧履歴の配列(閲覧日の逆順にソート済み)
     */
    public function addProductToMember(
        Member $member = null, Product $product, array $old_views = null)
    {
        if (!$old_views) {
            $old_views = array();
        }

        if ($member) {
            $conn = Doctrine_Manager::connection();

            $conn->beginTransaction();

            try {
                $db_views = $this->createQuery('v')->
                    forUpdate(true)->
                    where('v.member_id = ?', $member->getId())->
                    execute();

                foreach ($db_views as $db_idx => $db_view) {
                    foreach ($old_views as $old_idx => $old_view) {
                        if ($db_view->getProduct()->getId() ==
                            $old_view->getProduct()->getId()) {
                            if ($db_view->getCreatedAt() >=
                                $old_view->getCreatedAt()) {
                                unset($old_views[$old_idx]);
                            } else {
                                unset($db_views[$db_idx]);
                                $db_view->delete();
                            }

                            break;
                        }
                    }
                }

                $views = array();
                foreach ($db_views as $db_view) {
                    $views[] = $db_view;
                }

                $views = array_merge($views, $old_views);
                uasort($views, array($this, 'compareForSort'));

                foreach ($views as $idx => $view) {
                    if ($view->getProduct()->getId() == $product->getId()) {
                        unset($views[$idx]);
                        $view->delete();
                    } else if ($member) {
                        $view->setMember($member);
                    }
                }

                while (count($views) >=
                       sfConfig::get('app_product_view_history_max')) {
                    $view = array_pop($views);
                    $view->delete();
                }

                $new_view = new ProductView();
                $new_view->setMember($member);
                $new_view->setProduct($product);
                array_unshift($views, $new_view);

                foreach ($views as $view) {
                    try {
                        $view->save();
                    } catch (Exception $e) {
                        $p = ProductTable::getInstance()->find(
                            $view->getProduct()->getId());
                        if (!$p) {
                            /*
                             * 商品削除によりエラーが発生したため、その商品を
                             * 閲覧履歴に追加するのを諦め、次の商品に進む。
                             */
                            continue;
                        }

                        throw $e;
                    }
                }

                $conn->commit();

                return $views;
            } catch (Exception $e) {
                $conn->rollback();
                throw $e;
            }
        } else {
            $views = $old_views;

            foreach ($views as $idx => $view) {
                if ($view->getProduct()->getId() == $product->getId()) {
                    unset($views[$idx]);
                }
            }

            while (count($views) >=
                   sfConfig::get('app_product_view_history_max')) {
                array_pop($views);
            }

            $new_view = new ProductView();
            $new_view->setProduct($product);
            $new_view->setCreatedAt(date('Y-m-d H:i:s'));
            array_unshift($views, $new_view);

            return $views;
        }
    }
}
