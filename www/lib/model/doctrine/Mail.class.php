<?php

/**
 * Mail
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    cosmedecorte
 * @subpackage model
 * @author     BROADTECH INC.
 * @version    SVN: $Id: Mail.class.php 70 2011-05-24 11:50:16Z oda $
 */
class Mail extends BaseMail
{
    public function getLogsQuery()
    {
        return MailLogTable::getInstance()->createQuery()->
            where('mail_id = ?', $this->getId());
    }

    public function send(sfMailer $mailer)
    {
        $count = 0;

        foreach ($this->getGroup()->getMembers() as $member) {
            $address = null;
            if ($this->getAddressType() == '携帯') {
                $address = $member->getMailMobile();
            } else {
                $address = $member->getMailPc();
            }

            /*
             * 二重送信を防ぐため、メールログより送信済みか否かを確認する。
             * 送信済みの場合は、再送信を行わない。
             */
            $chk_query = MailLogTable::getInstance()->createQuery()->
                where('mail_id = ?', $this->getId())->
                andWhere('address = ?', $address);
            if ($chk_query->fetchOne()) {
                echo "[" . $address . "] already sent, skipped.\n";
                continue;
            }

            /*
             * メール本文中に置換変数(${xxxx})が存在する場合は、変数を実際の
             * 値に置換する。
             */
            $body = $this->getBody();
            $matches = array();
            if (preg_match_all('/\${([^}]*)}/', $body, $matches)) {
                foreach ($matches[1] as $match) {
                    $prop_name = $match;
                    $prop_name = str_replace('_', ' ', $prop_name);
                    $prop_name = ucwords($prop_name);
                    $prop_name = str_replace(' ', '', $prop_name);
                    $prop_value =
                        call_user_func(array($member, 'get' . $prop_name));

                    $body = preg_replace(
                        '/\${' . $match . '}/', $prop_value, $body);
                }
            }

            $mail_msg = new Swift_Message();
            $mail_msg->setCharset('ISO-2022-JP');
            $mail_msg->setEncoder(Swift_Encoding::get7BitEncoding());
            $mail_msg->setSubject(
                mb_encode_mimeheader($this->getSubject(), 'JIS', 'B', ''));
            $mail_msg->setBody(mb_convert_encoding($body, 'JIS'));
            $mail_msg->setTo($address);
            if ($this->getAuthor()->getName()) {
                $mail_msg->setFrom(
                    array($this->getAuthor()->getAddress() =>
                          mb_encode_mimeheader(
                              $this->getAuthor()->getName(), 'JIS', 'B', '')));
            } else {
                $mail_msg->setFrom($this->getAuthor()->getAddress());
            }

            $mailer->send($mail_msg);
            $count++;

            $log = new MailLog();
            $log->setMail($this);
            $log->setAddress($address);
            $log->save();
            $log = null;
        }

        return $count;
    }
}
